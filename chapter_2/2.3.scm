; 2.2
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (length-point p1 p2)
    (let ((xp1 (x-point p1)) (yp1 (y-point p1))
         (xp2 (x-point p2)) (yp2 (y-point p2)))
        (sqrt (+ (* (- xp1 xp2) (- xp1 xp2))
                 (* (- yp1 yp2) (- yp1 yp2))))))

(define (midpoint p1 p2)
    (make-point (/ (+ (x-point p1) (x-point p2)) 2.0)
                (/ (+ (y-point p1) (y-point p2)) 2.0)))

(define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ", ")
    (display (y-point p))
    (display ")"))

(define (make-segment ps pe) (cons ps pe))
(define (start-point s) (car s))
(define (end-point s) (cdr s))
(define (lengh-segment s)
    (length-point (start-point s) (end-point s)))
(define (midpoint-segment s)
    (midpoint (start-point s) (end-point s)))

(define (make-rectangle lline rline)
    (cons lline rline))
(define (lline x) (car x))
(define (rline x) (cdr x))
(define (area x)
    (* (lengh-segment (lline x)) (lengh-segment (rline x))))

(define (length-rectangle x)
    (* 2 (+ (lengh-segment (lline x)) (lengh-segment (rline x)))))

(define (try)
    (define a (make-point 0 0))
    (define b (make-point 0 3))
    (define c (make-point 5 0))
    (define ls (make-segment a b))
    (define rs (make-segment a c))
    (define rectangle (make-rectangle ls rs))
    (display (area rectangle))
    (newline)
    (display (length-rectangle rectangle))
)
