; the thing worth doing typically take time and effort
; 2.65

(define (make-tree entry left right)
    (list entry left right))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))

(define (tree->list2 tree)
    (define (iter t result)
        (if (null? t)
            result
            (iter (left-branch t) (cons (entry t) (iter (right-branch t) result)))))
    (iter tree '()))

(define (list->tree elements)
    (car (partial-tree elements (length elements))))

(define (partial-tree els n)
    (if (= n 0) (cons '() els)
        (let ((left-size (quotient (- n 1) 2)))
            (let ((left-result (partial-tree els left-size)))
                (let ((left-tree (car left-result))
                      (non-left-els (cdr left-result))
                      (right-size (- n (+ left-size 1))))
                    (let ((current-entry (car non-left-els))
                         (right-result (partial-tree (cdr non-left-els) right-size)))
                        (let ((right-tree (car right-result))
                              (remaining-els (cdr right-result)))
                            (cons (make-tree current-entry left-tree right-tree) remaining-els))))))))

; picked from 2.61
(define (intersection-list set1 set2)
    (if (or (null? set1) (null? set2)) ()
          (let ((x1 (car set1)) (x2 (car set2)))
          (cond
            ((= x1 x2) (cons x1 (intersection-list (cdr set1) (cdr set2))))
            ((> x1 x2) (intersection-list set1 (cdr set2)))
            ((< x1 x2) (intersection-list (cdr set1) set2)))
          )
    )
)

(define (union-list set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          (else
          (let ((x1 (car set1)) (x2 (car set2)))
          (cond
            ((= x1 x2) (cons x1 (union-list (cdr set1) (cdr set2))))
            ((> x1 x2) (cons x2 (union-list  set1 (cdr set2))))
            ((< x1 x2) (cons x1 (union-list (cdr set1) set2))))
          ))
    )
)

(define (element-of-set? x set)
    (cond ((null? set) false)
          ((= x (entry set)) true)
          ((> x (entry set)) (element-of-set? x (right-branch set)))
          ((< x (entry set)) (element-of-set? x (left-branch set)))))

(define (adjoin-set x set)
    (cond ((null? set) (make-tree x '() '()))
          ((= x (entry set)) set)
          ((> x (entry set)) (make-tree (entry set) (left-branch set) (adjoin-set x (right-branch set))))
          ((< x (entry set)) (make-tree (entry set) (adjoin-set x (left-branch set)) (right-branch set)))))

(define (union-set set1 set2)
    (let ((list1 (tree->list2 set1)) (list2 (tree->list2 set2)))
         (let ((union-list-result (union-list list1 list2)))
                (list->tree union-list-result))))

(define (intersection-set set1 set2)
    (let ((list1 (tree->list2 set1)) (list2 (tree->list2 set2)))
         (let ((intersection-list-result (intersection-list list1 list2)))
                (list->tree intersection-list-result))))

(define (try)
    (define tree1 (list->tree '(1 3 5 7 9 11)))
    (define tree2 (list->tree '(1 4 6 7 8 11)))
    (display tree1)
    (newline)
    (display tree2)
    (newline)
    (display (element-of-set? 7 tree1))
    (newline)
    (display (element-of-set? 17 tree1))
    (newline)
    (display (adjoin-set 7 tree1))
    (newline)
    (display (adjoin-set 17 tree1))
    (newline)
    (display (list->tree (tree->list2 (adjoin-set 17 tree1))))
    (newline)
    (display (union-set tree1 tree2))
    (newline)
    (display (intersection-set tree1 tree2))
)
