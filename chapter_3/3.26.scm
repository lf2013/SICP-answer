; things worth doing typically take time and effort

; import from 2.66_v2.scm
(define (make-tree tree l r) (list tree l r))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (set-left-branch tree v) (set-cdr! tree (list (list v '() '()) (right-branch tree))) )
(define (set-right-branch tree v) (set-cdr! tree (list (left-branch tree) (list v '() '()))))
(define (insert-tree x y tree)
	(cond ((null? tree) false)
	      ((= x (car (entry tree))) true)
	      ((< x (car (entry tree))) (if (null? (left-branch tree)) (set-left-branch tree (cons x y)) (insert-tree x (left-branch tree))))
	      ((> x (car (entry tree))) (if (null? (right-branch tree)) (set-right-branch tree (cons x y)) (insert-tree x (right-branch tree))))))

(define (search-tree key tree)
    (cond ((null? tree) false)
          ((= key (car (entry tree)))
            tree)
          ((> key (car (entry tree)))
            (search-tree key (right-branch tree)))
          ((< key (car (entry tree)))
            (search-tree key (left-branch tree)))))

(define (make-table) (list 'table))

(define (look-up key table) (assoc key (cdr table)))

(define (assoc key table)
    (cond ((null? table) false)
            (else (search-tree key table))))

(define (insert! k v table)
	(newline)
	(display table)
	(if (null? (cdr table))
		(set-cdr! table (make-tree (cons k v) '() '()))
	(insert-tree k v (cdr table))))

(define (try)
    (define a (make-table))
    (display a)
    (newline)
    (display (look-up 1 a))
    (newline)
    (insert! 1 'v a)
    (display a)
    (newline)
    (display (look-up 1 a))
    (insert! 1 'v1 a)
    (newline)
    (display a)
    (newline)
    (display (look-up 1 a))
    (newline)
    (display (look-up 2 a))
    (insert! 2 'v2 a)
    (insert! 0 'v2 a)
    (newline)
    (display a)
    (newline)
    (display (look-up 2 a))
    (newline)
    (display (look-up 0 a))
)

(try)
