; the things worth doing typically take time and effort

(define (make-queue)
    (let ((head-queue-ptr '())
          (tail-queue-ptr '()))
        (define (empty-q?) (null? head-queue-ptr))
        (define (display-q s) (if (null? s) (begin (display "") (newline)) (begin (display (car s)) (display-q (cdr s)))))
        (define (dispatch m)
            (cond ((eq? m 'insert-queue!)
                    (lambda (v)
                        (let ((new-v (cons v '())))
                            (if (empty-q?)
                                (begin
                                    (set! head-queue-ptr new-v)
                                    (set! tail-queue-ptr new-v))
                                (begin (set-cdr! tail-queue-ptr new-v) (set! tail-queue-ptr new-v))))))
                  ((eq? m 'delete-q!) (if (empty-q?) (error "empty-q?") (begin (set! head-queue-ptr (cdr head-queue-ptr)))))
                  ((eq? m 'empty-q?) (empty-q?))
                  ((eq? m 'display-q?) (display-q head-queue-ptr))
                  (else (error "unknow dispatch"))))

    dispatch))

(define (empty-q? q) (q 'empty-q?))
(define (insert-queue! q v) ((q 'insert-queue!) v))
(define (display-q q) (q 'display-q?))
(define (delete-q q) (q 'delete-q!))

(define (try)
    (define q (make-queue))
    (empty-q? q)
    (display-q q)
    (insert-queue! q 'a)
    (display-q q)
    (insert-queue! q 'b)
    (display-q q)
    (insert-queue! q 'b)
    (display-q q)
    (delete-q q)
    (display-q q)
    (delete-q q)
    (display-q q)
    (delete-q q)
    (display-q q)
    (delete-q q)
    (display-q q)
)
