; 2.8
(define (make-interval a b) (cons a b))
(define (upper-bound x) (max (cdr x) (car x)))
(define (lower-bound x) (min (car x) (cdr x)))
(define (print-interval x)
    (display "(")
    (display (lower-bound x))
    (display ", ")
    (display (upper-bound x))
    (display ")"))

(define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound y)))
          (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1  p2 p3 p4))))

(define (sub-interval x y)
    (make-interval (- (lower-bound x) (upper-bound y))
                   (- (upper-bound x) (lower-bound y))))

(define (div-internal x y)
    (if (> 0 (* (upper-bound y) (lower-bound y)))
        (error "bad bound")
    (mul-interval x (make-interval (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y))))))


(define (try)
    (define l (make-interval 1 3))
    (define r (make-interval 1 3))
    (define bad (make-interval -1 2))
    (define x (add-interval l r))
    (define y (mul-interval l r))
    (define z (sub-interval l r))
    (define bd (div-internal l bad))
    (print-interval l)
    (print-interval r)
    (print-interval x)
    (print-interval y)
    (print-interval z)
    (print-interval bd)
)
