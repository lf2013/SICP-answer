; the thing worth doing typically take time and effort
; 2.66 v2, local data version

(define (make-tree tree l r) (list tree l r))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (set-left-branch tree v) (set-cdr! tree (list (list v '() '()) (right-branch tree))) )
(define (set-right-branch tree v) (set-cdr! tree (list (left-branch tree) (list v '() '()))))
(define (insert-tree x tree)
	(cond ((null? tree) false)
	      ((= x (entry tree)) true)
	      ((< x (entry tree)) (if (null? (left-branch tree)) (set-left-branch tree x) (insert-tree x (left-branch tree))))
	      ((> x (entry tree)) (if (null? (right-branch tree)) (set-right-branch tree x) (insert-tree x (right-branch tree))))))


(define (search-tree key tree)
    (cond ((null? tree) false)
          ((= key (entry tree))
            tree)
          ((> key (entry tree))
            (search-tree key (right-branch tree)))
          ((< key (entry tree))
            (search-tree key (left-branch tree)))))

(define (try)
	(define a (make-tree 1 '() '()))
	(display a)
	(newline)
	(insert-tree 2 a)
	(display a)
	(newline)
	(insert-tree 0 a)
	(display a)
	(newline)
	(insert-tree 3 a)
	(display a)
	(newline)
	(display (search-tree 3 a))
	(newline)
	(display (search-tree 30 a))
	(newline)
)

(try)
