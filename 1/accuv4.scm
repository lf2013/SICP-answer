(define (accumulate means gcd1 f a next b)
	(if (> a b)
		1
	(means (cond ((= (gcd1 a b) 1)(f a))
			(else 1)) 
		(accumulate means gcd1 f (next a) next b)
	))
)
(define (product f a prime? next b)
	(accumulate * f  prime? a next b)
)
;(define (accumulate means filtera f a next b)
;	(define (deal c a)
;	(if (> a b)
;		c
;	(deal (means c (* (f a) (filtera a))) (next a)) 
;	))
;	(deal 0 a)
;)
(define (prime? x)
	(define (deal a x)
		(cond ((> (* a a) x) 1)
			  ((= (remainder x a) 0) 0)
			(else (deal (+ 1 a) x))
		)
	)
	(deal 2 x)
)
(define (i x) x)
(define (squre x) (* x x))
(define (squre1 x) 
		(/ (* x x)
			(*(+ x 1) (+ x 1))
		)
)
(define (inc n) (+ n 1))
(define (incby2 n) (+ n 2))
(define (caculatePi b)
;	(/ (product squre 2.0 incby2 (* 2 b))
;	 (product squre 3.0 incby2 (- (* 2 b) 1))
	 (* 2 (product squre1 2.0 prime? incby2  b))
)
	
	
